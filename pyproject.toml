[project]
name = "type00"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.11, <4.0"
dependencies = [
    "nonebot2[httpx, fastapi, aiohttp]>=2.4.0",
    "nonebot-plugin-alconna>=0.59.4",
    "nonebot-plugin-apscheduler>=0.5.0",
    "nonebot-plugin-localstore>=0.7.4",
    "nonebot-plugin-uninfo>=0.9.0",
    "nonebot2>=2.4.3",
    "nonebot-adapter-onebot>=2.4.6",
]

[tool.nonebot]
adapters = [
    { name = "OneBot V12", module_name = "nonebot.adapters.onebot.v12", project_link = "nonebot-adapter-onebot", desc = "OneBot V12 协议" },
    { name = "OneBot V11", module_name = "nonebot.adapters.onebot.v11", project_link = "nonebot-adapter-onebot", desc = "OneBot V11 协议" },
]
plugin_dirs = ["src/plugins"]

[tool.ruff]
line-length = 88

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "I", # isort
    "N", # PEP8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TC", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    # "ERA",   # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "FAST", # FastAPI
    "PERF", # Perflint
    "FURB", # refurb
    "RUF", # Ruff-specific rules
]
ignore = [
    "C901",
    "T201",
    "E731",
    "PT023",
    "B010", #  Do not call `setattr` with a constant attribute value.
    "SIM105", # Use `contextlib.suppress`
    "B008", # Do not perform function call in argument defaults
    "RUF100", # Unused `noqa` directive
    "TC003", # Move xxx into a type-checking block
    "E402", # module level import not at top of file
    "E501", # 过长的行由 ruff format 处理, 剩余的都是字符串
    "UP035", # pyupgrade, 但 typing.Callable 的导入会报错
    "TRY003",
    "TRY301", # 为啥非要把 raise 丢进另外一个 inner fn 里
    "BLE001", # except Exception as e
    "PGH003", # 要求 `# type: ignore` 提供理由，但 pyright 和 mypy 等都不是统一标准。
    "PLC0414", # 用 import-as 表示 re-export
    "N818", # 要求所有自定义错误以 Error 作后缀，但我们不这么做
    "RET502", # return = return None
    "RET503", # 就要 implicit return none
    "PLC0105", # 我们已经用 R 表示协变，Q 表示逆变了
    "PLR0913", # 参数就那么多的，你用 builder 什么的不是更逆天？
    "SIM108", # 迫真 simplicy
    "RUF001", # String contains ambiguous `，` (FULLWIDTH COMMA). Did you mean `,` (COMMA)?
    "RUF002", # Docstring contains ambiguous `，` (FULLWIDTH COMMA). Did you mean `,` (COMMA)?
    "RUF009", # 我不想要额外的全局变量。
    "UP038", # instance(..., X | Y) 还是太超前了
    "RUF003", # 中文注释里用全角符号怎么你了
    "SLOT000", # 动态类型需求，主要是 json5 backend
    "PLR0911", "PLR0912", "PLR0915", # 复杂度高点怎么你了
    "PYI041", # int 和 float 在运行时的类型没有交集（互不成立 issubclass）
    "PLW2901", # shallow 怎么你了
    "S101", # assert 怎么你了，非要 RuntimeError 吗
    "PLR2004", # magic number 怎么你了
    "TRY004", # 我要抛啥错误我清楚
    "COM812", # 强制尾随逗号
    "TID252", # 相对导入
    "ISC001", # format warning
    "N801", # Class name should use CapWords convention
    "N802", # Function name should be lowercase
    "N804", # First argument of a class method should be named `cls`
    "N805", # First argument of a method should be named `self`
    "N806", # Variable in function should be lowercase
]
flake8-quotes = { inline-quotes = "double", multiline-quotes = "double" }

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["src", "tests/*"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "standard"
defineConstant = { PYDANTIC_V2 = true }
executionEnvironments = [
    { root = "./tests", extraPaths = ["./"] },
    { root = "./" },
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = ["--import-mode=importlib"]
asyncio_default_fixture_loop_scope = "session"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError:",
]
omit = ["*/compat.py", "*/migrations/*"]

[tool.uv]
index-url = "https://pypi.tuna.tsinghua.edu.cn/simple"
